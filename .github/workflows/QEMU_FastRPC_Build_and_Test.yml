
name: FastRPC Build and Test

on:
  push:
    branches:
      - 'main'
      - 'development'
  pull_request:
    branches:
      - 'main'
      - 'development'

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential gcc g++ make autoconf automake libtool automake \
        libelf-dev flex bison qemu-system-x86

    - name: Download Linaro tools and untar
      run: |
        wget -c https://releases.linaro.org/components/toolchain/binaries/latest-7/aarch64-linux-gnu/gcc-linaro-7.5.0-2019.12-i686_aarch64-linux-gnu.tar.xz
        tar xf gcc-linaro-7.5.0-2019.12-i686_aarch64-linux-gnu.tar.xz

    - name: Set Up Build Environment and compile code for LE platform
      run: |
        # Set Up Build Environment
        export PATH="$PWD/gcc-linaro-7.5.0-2019.12-i686_aarch64-linux-gnu/bin/:$PATH"
        export CC=aarch64-linux-gnu-gcc
        export CXX=aarch64-linux-gnu-g++
        export AS=aarch64-linux-gnu-as
        export LD=aarch64-linux-gnu-ld
        export RANLIB=aarch64-linux-gnu-ranlib
        export STRIP=aarch64-linux-gnu-strip
        
        # Compile the source code
        chmod 777 gitcompile
        ./gitcompile --host=aarch64-linux-gnu

    - name: Verify the compiled binaries
      run: |
        echo "Verify the compiled binaries"
        Files=("src/.libs/libadsp_default_listener.so
          src/.libs/libadsprpc.so
          src/.libs/libcdsp_default_listener.so
          src/.libs/libcdsprpc.so
          src/.libs/libsdsp_default_listener.so
          src/.libs/libsdsprpc.so
          src/adsprpcd
          src/cdsprpcd
          src/sdsprpcd")
        for File in $Files
        do 
         if [ -f $File ] ; then echo $File " - Exists" ; else echo $File " - Not Exists" && exit -1 ; fi
        done

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential gcc g++ make libelf-dev flex bison \
          qemu-system-x86 util-linux initramfs-tools
       
    - name: Create initramfs
      run: |
        # Create a working directory
        wget https://github.qualcomm.com/bjorande/ramdisk/releases/download/v2.0/ramdisk-qcom-armv8a.cpio.gz

        cd firmware_dir && find . | cpio -o -H newc | gzip -9 > ../firmware-hamoa.cpio.gz
        
        # Copy test binary
        cp -rf src/.libs/libadsp_default_listener.so fastrpc_dir/usr/lib/
        cp -rf src/.libs/libadsprpc.so fastrpc_dir/usr/lib/
        cp -rf src/.libs/libcdsp_default_listener.so fastrpc_dir/usr/lib/
        cp -rf src/.libs/libcdsprpc.so fastrpc_dir/usr/lib/
        cp -rf src/.libs/libsdsp_default_listener.so fastrpc_dir/usr/lib/
        cp -rf src/.libs/libsdsprpc.so fastrpc_dir/usr/lib/

        cp -rf src/.libs/libadsp_default_listener.so.1 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libadsprpc.so.1 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libcdsp_default_listener.so.1 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libcdsprpc.so.1 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libsdsp_default_listener.so.1 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libsdsprpc.so.1 fastrpc_dir/usr/lib/
        
        cp -rf src/.libs/libadsp_default_listener.so.1.0.0 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libadsprpc.so.1.0.0 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libcdsp_default_listener.so.1.0.0 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libcdsprpc.so.1.0.0 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libsdsp_default_listener.so.1.0.0 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libsdsprpc.so.1.0.0 fastrpc_dir/usr/lib/
        
        cp -rf src/adsprpcd fastrpc_dir/usr/bin/
        cp -rf src/cdsprpcd fastrpc_dir/usr/bin/
        cp -rf src/sdsprpcd fastrpc_dir/usr/bin/

        cd fastrpc_dir && find . | cpio -o -H newc | gzip -9 > ../fastrpc.cpio.gz
        cat ramdisk-qcom-armv8a.cpio.gz firmware-hamoa.cpio.gz fastrpc.cpio.gz > ramdisk.gz
        cd tar-install && find lib/modules | cpio -o -H newc -R +0:+0 | gzip >> ../ramdisk.gz
    
    - name: Download and build Linux kernel
      run: |
        git clone  https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git hamoa
        cd hamoa

        umask 0022
        make LLVM=1 ARCH=arm64 defconfig
        make LLVM=1 ARCH=arm64 -j99 dir-pkg INSTALL_MOD_STRIP=1
    
    - name: Run QEMU
      run: |
        qemu-system-aarch64 \
          -machine virt \
          -cpu cortex-a53 \
          -m 1024 \
          -nographic \
          -kernel arch/arm64/boot/Image \
          -append "earlycon clk_ignore_unused pd_ignore_unused audit=0 console=ttyAMA0" \
          -initrd ramdisk.gz \
          -dtb arch/arm64/boot/dts/qcom/x1e80100-crd.dtb \
          -no-reboot


    - name: Check QEMU output
      run: |
        if grep -q "hello" qemu_output.log; then
          echo "Test passed: 'hello' message found in QEMU boot logs."
        else
          echo "Test failed: 'hello' message not found in QEMU boot logs."
          exit 1


name: FastRPC Build and Test

on:
  push:
    branches:
      - 'main'
      - 'development'
  pull_request:
    branches:
      - 'main'
      - 'development'

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install yq
      run: sudo snap install yq
    
    - name: Read paths from config.yaml
      id: config
      run: |
        echo "adsp=$(yq '.paths.adsp' CI/LAVA/sa8775p/config.yml)" >> $GITHUB_OUTPUT
        echo "cdsp=$(yq '.paths.cdsp' CI/LAVA/sa8775p/config.yml)" >> $GITHUB_OUTPUT
        echo "cdsp1=$(yq '.paths.cdsp' CI/LAVA/sa8775p/config.yml)" >> $GITHUB_OUTPUT
        echo "gdsp0=$(yq '.paths.cdsp' CI/LAVA/sa8775p/config.yml)" >> $GITHUB_OUTPUT
        echo "gdsp1=$(yq '.paths.cdsp' CI/LAVA/sa8775p/config.yml)" >> $GITHUB_OUTPUT
        echo "firmware=$(yq '.paths.firmware' CI/LAVA/sa8775p/config.yml)" >> $GITHUB_OUTPUT
    
    - name: Copy DSP and firmware files
      run: |
        cp ${{ steps.config.outputs.adsp }}/*.so firmware_dir/usr/lib/dsp/adsp
        cp ${{ steps.config.outputs.cdsp }}/*.so firmware_dir/usr/lib/dsp/cdsp
        cp -rf ${{ steps.config.outputs.firmware }}/* firmware_dir/lib/firmware/qcom/x1e80100/

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential gcc g++ make autoconf automake libtool automake \
        libelf-dev flex bison tar xz-utils llvm clang lld llvm-dev util-linux initramfs-tools
        
    - name: Download Linaro tools and untar
      run: |
        wget -c https://releases.linaro.org/components/toolchain/binaries/latest-7/aarch64-linux-gnu/gcc-linaro-7.5.0-2019.12-i686_aarch64-linux-gnu.tar.xz
        tar xf gcc-linaro-7.5.0-2019.12-i686_aarch64-linux-gnu.tar.xz

    - name: Set Up Build Environment and compile code for LE platform
      run: |
        # Set Up Build Environment
        export PATH="$PWD/gcc-linaro-7.5.0-2019.12-i686_aarch64-linux-gnu/bin/:$PATH"
        export CC=aarch64-linux-gnu-gcc
        export CXX=aarch64-linux-gnu-g++
        export AS=aarch64-linux-gnu-as
        export LD=aarch64-linux-gnu-ld
        export RANLIB=aarch64-linux-gnu-ranlib
        export STRIP=aarch64-linux-gnu-strip
        
        # Compile the source code
        chmod 777 gitcompile
        ./gitcompile --host=aarch64-linux-gnu

    - name: Verify the compiled binaries
      run: |
        echo "Verify the compiled binaries"
        Files=("src/.libs/libadsp_default_listener.so
          src/.libs/libadsprpc.so
          src/.libs/libcdsp_default_listener.so
          src/.libs/libcdsprpc.so
          src/.libs/libsdsp_default_listener.so
          src/.libs/libsdsprpc.so
          src/adsprpcd
          src/cdsprpcd
          src/sdsprpcd")
        for File in $Files
        do 
         if [ -f $File ] ; then echo $File " - Exists" ; else echo $File " - Not Exists" && exit -1 ; fi
        done

    - name: Create directories
      run: |
        mkdir -p firmware_dir/usr/lib/dsp/adsp
        mkdir -p firmware_dir/usr/lib/dsp/cdsp
        mkdir -p firmware_dir/usr/lib/dsp/cdsp1
        mkdir -p firmware_dir/usr/lib/dsp/gdsp0
        mkdir -p firmware_dir/usr/lib/dsp/gdsp1
        mkdir -p firmware_dir/lib/firmware/qcom/x1e80100
        mkdir -p fastrpc_dir/usr/lib/
        mkdir -p fastrpc_dir/usr/bin/
        
    - name: Download hexagon-dsp-binaries
      run: |
        git clone https://github.com/linux-msm/hexagon-dsp-binaries.git
        ls -la hexagon-dsp-binaries
        cp ${{ steps.config.outputs.adsp }}/*.so firmware_dir/usr/lib/dsp/adsp
        cp ${{ steps.config.outputs.cdsp }}/*.so firmware_dir/usr/lib/dsp/cdsp
        cp ${{ steps.config.outputs.cdsp1 }}/*.so firmware_dir/usr/lib/dsp/cdsp1
        cp ${{ steps.config.outputs.gdsp0 }}/*.so firmware_dir/usr/lib/dsp/gdsp0
        cp ${{ steps.config.outputs.gdsp1 }}/*.so firmware_dir/usr/lib/dsp/gdsp1

    - name: Download dsp-linux-firmware
      run: |
        git clone https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git
        ls -la linux-firmware
        cp -rf ${{ steps.config.outputs.firmware }}/* firmware_dir/lib/firmware/qcom/x1e80100/

    - name: Download ramdisk
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
           -L -o ramdisk-qcom-armv8a.cpio.gz \
           https://github.com/quic-mtharu/qemu-ramdisk-artifacts/tree/main/qemu-ramdisk-artifacts/ramdisk-qcom-armv8a.cpio.gz
    
    - name: Download and build Linux kernel
      run: |
        git clone  https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git linux
        cd linux
        umask 0022
        make LLVM=1 ARCH=arm64 defconfig
        make LLVM=1 ARCH=arm64 -j$(nproc) dir-pkg INSTALL_MOD_STRIP=1
        cd ..

    - name: Create ramdisk file including fastrpc binaries
      run: |
        # Copy fastrpc binary
        cp -rf src/.libs/libadsp_default_listener.so fastrpc_dir/usr/lib/
        cp -rf src/.libs/libadsprpc.so fastrpc_dir/usr/lib/
        cp -rf src/.libs/libcdsp_default_listener.so fastrpc_dir/usr/lib/
        cp -rf src/.libs/libcdsprpc.so fastrpc_dir/usr/lib/
        cp -rf src/.libs/libsdsp_default_listener.so fastrpc_dir/usr/lib/
        cp -rf src/.libs/libsdsprpc.so fastrpc_dir/usr/lib/

        cp -rf src/.libs/libadsp_default_listener.so.1 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libadsprpc.so.1 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libcdsp_default_listener.so.1 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libcdsprpc.so.1 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libsdsp_default_listener.so.1 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libsdsprpc.so.1 fastrpc_dir/usr/lib/
        
        cp -rf src/.libs/libadsp_default_listener.so.1.0.0 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libadsprpc.so.1.0.0 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libcdsp_default_listener.so.1.0.0 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libcdsprpc.so.1.0.0 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libsdsp_default_listener.so.1.0.0 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libsdsprpc.so.1.0.0 fastrpc_dir/usr/lib/
        
        cp -rf src/adsprpcd fastrpc_dir/usr/bin/
        cp -rf src/cdsprpcd fastrpc_dir/usr/bin/
        cp -rf src/sdsprpcd fastrpc_dir/usr/bin/

         # Copy fastrpc test binary
        cp -rf test/fastrpc_test fastrpc_dir/usr/bin
        cp -rf test/linux/* fastrpc_dir/usr/bin
        cp -rf test/v75/* fastrpc_dir/usr/bin
        
        cd firmware_dir
        find . | cpio -o -H newc | gzip -9 > ../dsp-firmware.cpio.gz
        cd ..

        cd fastrpc_dir 
        find . | cpio -o -H newc | gzip -9 > ../fastrpc.cpio.gz
        cd ..

        cat ramdisk-qcom-armv8a.cpio.gz dsp-firmware.cpio.gz fastrpc.cpio.gz > ramdisk.gz
        cd linux/tar-install && find lib/modules | cpio -o -H newc -R +0:+0 | gzip >> ../ramdisk.gz
        cd ../..

    - name: Upload file to remote server
      run: |
        FILE_PATH="ramdisk.gz"
        REMOTE_URL="https://quic-yocto-fileserver-1029608027416.us-central1.run.app/qualcomm-linux/meta-qcom/15760629931-1/qcom-armv8a/"
        
        if [ -f "$FILE_PATH" ]; then
          echo "Uploading $FILE_PATH to $REMOTE_URL"
          curl -X PUT -T "$FILE_PATH" "$REMOTE_URL" --fail --silent --show-error
          echo "Upload successful"
        else
          echo "File $FILE_PATH does not exist"
          exit 1
        fi
    
    - name: Verify upload
      run: |
        FILE_NAME=$(basename "ramdisk.gz")
        REMOTE_FILE_URL="${REMOTE_URL}${FILE_NAME}"
        
        echo "Verifying upload at $REMOTE_FILE_URL"
        HTTP_STATUS=$(curl -o /dev/null -s -w "%{http_code}\n" "$REMOTE_FILE_URL")
        
        if [ "$HTTP_STATUS" -eq 200 ]; then
          echo "File successfully uploaded and accessible at $REMOTE_FILE_URL"
        else
          echo "Failed to verify upload. HTTP status code: $HTTP_STATUS"
          exit 1
        fi

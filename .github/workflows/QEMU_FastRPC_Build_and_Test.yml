
name: FastRPC Build and Test

on:
  push:
    branches:
      - 'main'
      - 'development'
  pull_request:
    branches:
      - 'main'
      - 'development'

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential gcc g++ make autoconf automake libtool automake \
        libelf-dev flex bison qemu-system-x86

   
    - name: Download Linaro tools and untar
      run: |
        wget -c https://releases.linaro.org/components/toolchain/binaries/latest-7/aarch64-linux-gnu/gcc-linaro-7.5.0-2019.12-i686_aarch64-linux-gnu.tar.xz
        tar xf gcc-linaro-7.5.0-2019.12-i686_aarch64-linux-gnu.tar.xz

    - name: Set Up Build Environment and compile code for LE platform
      run: |
        # Set Up Build Environment
        export PATH="$PWD/gcc-linaro-7.5.0-2019.12-i686_aarch64-linux-gnu/bin/:$PATH"
        export CC=aarch64-linux-gnu-gcc
        export CXX=aarch64-linux-gnu-g++
        export AS=aarch64-linux-gnu-as
        export LD=aarch64-linux-gnu-ld
        export RANLIB=aarch64-linux-gnu-ranlib
        export STRIP=aarch64-linux-gnu-strip
        
        # Compile the source code
        chmod 777 gitcompile
        ./gitcompile --host=aarch64-linux-gnu

    - name: Verify the compiled binaries
      run: |
        echo "Verify the compiled binaries"
        Files=("src/.libs/libadsp_default_listener.so
          src/.libs/libadsprpc.so
          src/.libs/libcdsp_default_listener.so
          src/.libs/libcdsprpc.so
          src/.libs/libsdsp_default_listener.so
          src/.libs/libsdsprpc.so
          src/adsprpcd
          src/cdsprpcd
          src/sdsprpcd")
        for File in $Files
        do 
         if [ -f $File ] ; then echo $File " - Exists" ; else echo $File " - Not Exists" && exit -1 ; fi
        done

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential gcc g++ make libelf-dev flex bison \
          qemu-system-x86 util-linux initramfs-tools
    
    - name: Build test binary
      run: |
        echo -e '#include <stdio.h>\nint main() { printf("hello\\n"); return 0; }' > test.c
        gcc -static -o test_hello test.c
   
    - name: Create initramfs
      run: |
        # Create a working directory
        mkdir -p initramfs/{bin,lib,lib64,proc,sys,dev}
    
        # Copy test binary
        cp test_hello initramfs/bin/
    
        # Create init script
        echo -e '#!/bin/sh\necho "Init started"\nexec /bin/test_hello\nexec /bin/sh' > initramfs/init
        chmod +x initramfs/init
    
        # Create initrd.img using cpio
        (cd initramfs && find . | cpio -H newc -o | gzip > ../initrd.img)
    
    - name: Create disk image and populate it
      run: |
        dd if=/dev/zero of=disk1.img bs=4096 count=51200
        mkfs.ext4 disk1.img
    
        sudo mkdir -p /mnt/tmpmnt
        sudo mount disk1.img /mnt/tmpmnt
    
        sudo cp -rf initramfs/* /mnt/tmpmnt
        sudo mkdir -p /mnt/tmpmnt/{sys,proc,dev}
    
        # Copy required libraries and binaries
        sudo cp -rf src/.libs/libadsp_default_listener.so /mnt/tmpmnt/lib64
        sudo cp -rf src/.libs/libadsprpc.so /mnt/tmpmnt/lib64
        sudo cp -rf src/.libs/libcdsp_default_listener.so /mnt/tmpmnt/lib64
        sudo cp -rf src/.libs/libcdsprpc.so /mnt/tmpmnt/lib64
        sudo cp -rf src/.libs/libsdsp_default_listener.so /mnt/tmpmnt/lib64
        sudo cp -rf src/.libs/libsdsprpc.so /mnt/tmpmnt/lib64
        sudo cp -rf src/adsprpcd /mnt/tmpmnt/bin
        sudo cp -rf src/cdsprpcd /mnt/tmpmnt/bin
        sudo cp -rf src/sdsprpcd /mnt/tmpmnt/bin
    
        sudo umount /mnt/tmpmnt
    
    - name: Download and build Linux kernel
      run: |
        wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.10.16.tar.xz
        tar -xf linux-5.10.16.tar.xz
        cd linux-5.10.16
    
        make defconfig
        make -j$(nproc) bzImage
    
    - name: Run QEMU
      run: |
        qemu-system-x86_64 -m 256 -nographic \
          -kernel linux-5.10.16/arch/x86/boot/bzImage \
          -initrd initrd.img \
          -hda disk1.img \
          --append "console=ttyS0 init=/init root=/dev/ram0"

    - name: Check QEMU output
      run: |
        if grep -q "hello" qemu_output.log; then
          echo "Test passed: 'hello' message found in QEMU boot logs."
        else
          echo "Test failed: 'hello' message not found in QEMU boot logs."
          exit 1

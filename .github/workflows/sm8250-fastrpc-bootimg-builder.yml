
name: sm8250 Build Boot Image with FastRPC Modules

on:
  push:
    branches:
      - 'main'
      - 'development'
  pull_request:
    branches:
      - 'main'
      - 'development'

jobs:
  build:
    runs-on: ubuntu-22.04
    container:
      image: lineageos4microg/docker-lineage-cicd:latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: 1. Install yq (without sudo)
      run: |
        wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O yq
        chmod +x yq
        mv yq /usr/local/bin/yq || mv yq ./yq  # fallback if /usr/local/bin is not writable
        apt-get update && apt-get install -y python3 python3-pip
        python3 --version
        pip3 --version
        # pip3 install intelhex gki

    - name: 2. Install mkbootimg from AOSP (manual setup)
      run: |
        apt-get update && apt-get install -y python3-pip git
        pip install intelhex
        git clone https://android.googlesource.com/platform/system/tools/mkbootimg
        export PYTHONPATH=$PWD/mkbootimg:$PYTHONPATH
        cp mkbootimg/mkbootimg.py /usr/local/bin/mkbootimg || cp mkbootimg/mkbootimg.py ./mkbootimg
        chmod +x /usr/local/bin/mkbootimg || chmod +x ./mkbootimg

    - name: 3. Install build dependencies (without sudo)
      run: |
        apt-get update && apt-get install -y \
        build-essential gcc g++ make autoconf automake libtool \
        libelf-dev flex bison tar xz-utils llvm clang lld llvm-dev \
        util-linux initramfs-tools

    - name: 4. Read paths from config.yaml
      id: config
      run: |
        echo "adsp=$(yq '.paths.adsp' CI/config/sm8250/config.yml)" >> $GITHUB_OUTPUT
        echo "cdsp=$(yq '.paths.cdsp' CI/config/sm8250/config.yml)" >> $GITHUB_OUTPUT
        echo "firmware=$(yq '.paths.firmware' CI/config/sm8250/config.yml)" >> $GITHUB_OUTPUT
        
    - name: 5. Download Linaro tools and untar
      run: |
        wget -c https://releases.linaro.org/components/toolchain/binaries/latest-7/aarch64-linux-gnu/gcc-linaro-7.5.0-2019.12-i686_aarch64-linux-gnu.tar.xz
        tar xf gcc-linaro-7.5.0-2019.12-i686_aarch64-linux-gnu.tar.xz

    - name: 6. Set Up Build Environment and compile code for LE platform
      run: |
        # Set Up Build Environment
        export PATH="$PWD/gcc-linaro-7.5.0-2019.12-i686_aarch64-linux-gnu/bin/:$PATH"
        export CC=aarch64-linux-gnu-gcc
        export CXX=aarch64-linux-gnu-g++
        export AS=aarch64-linux-gnu-as
        export LD=aarch64-linux-gnu-ld
        export RANLIB=aarch64-linux-gnu-ranlib
        export STRIP=aarch64-linux-gnu-strip
        
        # Compile the source code
        chmod 777 gitcompile
        ./gitcompile --host=aarch64-linux-gnu

    - name: 7. Verify fastrpc compiled binaries
      shell: sh
      run: |
        echo "Verify the compiled binaries"
        Files="src/.libs/libadsp_default_listener.so
        src/.libs/libadsprpc.so
        src/.libs/libcdsp_default_listener.so
        src/.libs/libcdsprpc.so
        src/.libs/libsdsp_default_listener.so
        src/.libs/libsdsprpc.so
        src/adsprpcd
        src/cdsprpcd
        src/sdsprpcd"
    
        for File in $Files
        do 
          if [ -f "$File" ]; then
            echo "$File - Exists"
          else
            echo "$File - Not Exists"
            exit 1
          fi
        done

    - name: 8. Create directories and verify required directories
      run: |
        # Create directories
        mkdir -p firmware_dir/usr/lib/dsp/adsp
        mkdir -p firmware_dir/usr/lib/dsp/cdsp
        mkdir -p firmware_dir/lib/firmware/qcom/sm8250
        mkdir -p fastrpc_dir/usr/lib
        mkdir -p fastrpc_dir/usr/bin

        # Verify directory structure
        echo "Verifying created directories:"
        for dir in \
          firmware_dir/usr/lib/dsp/adsp \
          firmware_dir/usr/lib/dsp/cdsp \
          firmware_dir/lib/firmware/qcom/sm8250 \
          fastrpc_dir/usr/lib \
          fastrpc_dir/usr/bin
        do
          if [ -d "$dir" ]; then
            echo "[OK] $dir exists"
          else
            echo "[ERROR] $dir is missing"
            exit 1
          fi
        done

    - name: 12. Copy fastrpc binary and fastrpc test binary
      run: |
        # Copy fastrpc binary
        cp -rf src/.libs/libadsp_default_listener.so fastrpc_dir/usr/lib/
        cp -rf src/.libs/libadsprpc.so fastrpc_dir/usr/lib/
        cp -rf src/.libs/libcdsp_default_listener.so fastrpc_dir/usr/lib/
        cp -rf src/.libs/libcdsprpc.so fastrpc_dir/usr/lib/
        cp -rf src/.libs/libsdsp_default_listener.so fastrpc_dir/usr/lib/
        cp -rf src/.libs/libsdsprpc.so fastrpc_dir/usr/lib/

        cp -rf src/.libs/libadsp_default_listener.so.1 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libadsprpc.so.1 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libcdsp_default_listener.so.1 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libcdsprpc.so.1 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libsdsp_default_listener.so.1 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libsdsprpc.so.1 fastrpc_dir/usr/lib/
        
        cp -rf src/.libs/libadsp_default_listener.so.1.0.0 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libadsprpc.so.1.0.0 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libcdsp_default_listener.so.1.0.0 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libcdsprpc.so.1.0.0 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libsdsp_default_listener.so.1.0.0 fastrpc_dir/usr/lib/
        cp -rf src/.libs/libsdsprpc.so.1.0.0 fastrpc_dir/usr/lib/
        
        cp -rf src/adsprpcd fastrpc_dir/usr/bin/
        cp -rf src/cdsprpcd fastrpc_dir/usr/bin/
        cp -rf src/sdsprpcd fastrpc_dir/usr/bin/

         # Copy fastrpc test binary
        cp -rf test/fastrpc_test fastrpc_dir/usr/bin
        cp -rf test/linux/* fastrpc_dir/usr/bin
        cp -rf test/v75/* fastrpc_dir/usr/bin

        echo "Listing contents of ./fastrpc_dir"
        find ./fastrpc_dir
        cd fastrpc_dir 
        find . | cpio -o -H newc | gzip -9 > ../fastrpc.cpio.gz
        cd ..

    - name: 9. Download hexagon-dsp-binaries
      run: |
        git clone https://github.com/linux-msm/hexagon-dsp-binaries.git
        ls -la hexagon-dsp-binaries
        cp ${{ steps.config.outputs.adsp }}/*.so firmware_dir/usr/lib/dsp/adsp
        cp ${{ steps.config.outputs.cdsp }}/*.so firmware_dir/usr/lib/dsp/cdsp

    - name: 10. Download dsp-linux-firmware
      run: |
        git clone https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git
        ls -la linux-firmware
        cp -rf ${{ steps.config.outputs.firmware }}/* firmware_dir/lib/firmware/qcom/sm8250/

    - name: 11. list and create a zip file of dsp-firware
      run: |
        echo "Listing contents of ./firmware_dir"
        find ./firmware_dir
        cd firmware_dir
        find . | cpio -o -H newc | gzip -9 > ../dsp-firmware.cpio.gz
        cd ..

    # Step 13: Download Linux kernel artifacts
    - name: 13. Download artifact using gh CLI
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
        gh run download 15867457800 --repo quic/fastrpc --name linux-kernel-artifacts --dir ./linux-kernel-artifacts


    # Step 13.1: Validate kernel and dtb paths
    - name: 13.1. Validate kernel and dtb paths
      run: |
        cd linux-kernel-artifacts
        test -f tar-install/lib/modules
        test -f arch/arm64/boot/Image
        test -f arch/arm64/boot/dts/qcom/sm8250-mtp.dtb

    - name: 13. Download and create fastrpc included ramdisk file
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
           -L -o ramdisk-qcom-armv8a.cpio.gz \
           https://github.com/quic-mtharu/qemu-ramdisk-artifacts/tree/main/qemu-ramdisk-artifacts/ramdisk-qcom-armv8a.cpio.gz

        cat ramdisk-qcom-armv8a.cpio.gz dsp-firmware.cpio.gz fastrpc.cpio.gz > ramdisk.gz
        cd tar-install 
        find lib/modules | cpio -o -H newc -R +0:+0 | gzip >> ../ramdisk.gz
        cd ..

    - name: 14. Create boot image using mkbootimg
      run: |
        python3 mkbootimg/mkbootimg.py  \
          --header_version 2 \
          --kernel arch/arm64/boot/Image \
          --dtb arch/arm64/boot/dts/qcom/sm8250-mtp.dtb \
          --cmdline "earlycon clk_ignore_unused pd_ignore_unused audit=0" \
          --ramdisk ramdisk.gz \
          --output sm8250_boot.img

    - name: 15. Upload Compiled Image
      uses: actions/upload-artifact@v4
      with:
        name: sm8250_boot.img
        path: sm8250_boot.img
